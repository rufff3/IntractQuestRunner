import time
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import multiprocessing

def load_cookies_from_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8-sig") as file:
            raw_content = file.read()
        cleaned_content = raw_content.replace('\n', '').replace(' ', '')
        separated_accounts = cleaned_content.replace("][", "]\n[")
        account_blocks = separated_accounts.split("\n")
        cookies_list = []
        for block in account_blocks:
            if block:
                cookies_list.append(json.loads(block))
        return cookies_list
    except Exception as e:
        print(f"‚ùå Gagal membaca atau parsing file cookies: {e}")
        return []
def inject_cookies(driver, cookies):
    driver.get("https://quest.intract.io")
    time.sleep(1)
    for cookie in cookies:
        if "sameSite" in cookie and cookie["sameSite"] is not None:
            if cookie["sameSite"].lower() == "no_restriction":
                cookie["sameSite"] = "None"
            elif cookie["sameSite"].lower() == "unspecified":
                cookie.pop("sameSite")
        if all(k in cookie for k in ("name", "value")):
            try:
                driver.add_cookie(cookie)
            except Exception:
                if 'domain' in cookie:
                    cookie.pop('domain')
                try:
                    driver.add_cookie(cookie)
                except Exception as e2:
                    print(f"‚ö†Ô∏è Gagal menambahkan cookie: {cookie.get('name')} ({e2})")
    print("‚úÖ Cookies berhasil ditambahkan.")
def setup_driver():
    options = Options()
    options.add_argument("--headless=new")  #TAMBAHKAN PAGAR DI DEPANNYA UNTUK MODE MEMBUKA BROWSER
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    return driver
def safe_click(driver, element):
    try:
        driver.execute_script("arguments[0].click();", element)
    except Exception as e:
        print(f"    -> Gagal klik via JavaScript: {e}")
        raise e
def shortcut_verification(driver, see_more_selector):
    print("\n--- Memulai Mode Verifikasi Jalan Pintas ---")
    time.sleep(3)
    try:
        see_more_buttons = driver.find_elements(By.CSS_SELECTOR, see_more_selector)
        if see_more_buttons:
            print(f"üîç Ditemukan {len(see_more_buttons)} tombol 'See More', mengklik...")
            for button in see_more_buttons:
                try:
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                    time.sleep(1)
                    safe_click(driver, button)
                except Exception:
                    continue
            print("‚úÖ Semua tombol 'See More' telah diklik.")
            time.sleep(2)
        else:
            print("üü° Tombol 'See More' tidak ditemukan.")
    except Exception:
        print("üü° Tombol 'See More' tidak ditemukan.")
    print("\nüîç Mengambil semua tombol 'Verify' di halaman ini...")
    try:
        verify_buttons = driver.find_elements(By.XPATH, "//button[contains(., 'Verify')]")
        if verify_buttons:
            count = 0
            for button in verify_buttons:
                try:
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                    time.sleep(0.5)
                    safe_click(driver, button)
                    count += 1
                except Exception:
                    continue
            print(f"‚úÖ Total {count} tombol 'Verify' berhasil diklik.")
        else:
            print("üü° Tidak ada tombol 'Verify' yang ditemukan di halaman ini.")
    except Exception as e:
        print(f"‚ùå Terjadi kesalahan saat mencari tombol 'Verify': {e}")
def process_account(i, cookies_for_one_account, QUEST_LINKS, SEE_MORE_SELECTOR):
    driver = None
    try:
        driver = setup_driver()
        inject_cookies(driver, cookies_for_one_account)
        for index, link in enumerate(QUEST_LINKS):
            print(f"\nüîó Mengerjakan Link #{index+1}: {link[:70]}...")
            driver.get(link)
            shortcut_verification(driver, SEE_MORE_SELECTOR)
        print("\nüéâ Semua link untuk akun ini telah selesai diproses.")
    except Exception as e:
        print(f"‚ùå Terjadi error fatal pada akun ke-{i+1}: {e}")
        if driver:
            driver.save_screenshot(f"fatal_error_akun_{i+1}.png")
    finally:
        if driver:
            print("‚úÖ Menutup browser...")
            driver.quit()
def run_single_mode(all_accounts, QUEST_LINKS, SEE_MORE_SELECTOR, timeout_per_akun=30, jeda_antar_akun=10):
    print(f"\nüî¢ Total akun yang akan dikerjakan (single/berurutan): {len(all_accounts)}")
    for i, cookies_for_one_account in enumerate(all_accounts):
        print(f"\nüöÄ [Single] Memproses Akun ke-{i+1} dari {len(all_accounts)}...")
        p = multiprocessing.Process(
            target=process_account,
            args=(i, cookies_for_one_account, QUEST_LINKS, SEE_MORE_SELECTOR)
        )
        p.start()
        p.join(timeout=timeout_per_akun)
        if p.is_alive():
            print(f"‚è≥ Akun ke-{i+1} memakan waktu lebih dari {timeout_per_akun} detik, hentikan & lanjut...")
            p.terminate()
            p.join()
        print(f"--- Selesai Akun ke-{i+1} ---")
        time.sleep(jeda_antar_akun)
def run_multi_mode(all_accounts, QUEST_LINKS, SEE_MORE_SELECTOR, akun_bersamaan, timeout_per_akun=30, jeda_batch=5):
    total = len(all_accounts)
    print(f"\nüî¢ Total akun: {total} | Eksekusi paralel: {akun_bersamaan} akun per batch")
    for start in range(0, total, akun_bersamaan):
        batch = all_accounts[start:start+akun_bersamaan]
        print(f"\nüöÄ [Multi] Memproses batch akun {start+1} s/d {start+len(batch)} ...")
        processes = []
        for idx_in_batch, cookies_for_one_account in enumerate(batch):
            i = start + idx_in_batch
            p = multiprocessing.Process(
                target=process_account,
                args=(i, cookies_for_one_account, QUEST_LINKS, SEE_MORE_SELECTOR)
            )
            processes.append((i, p))
            p.start()
        for i, p in processes:
            p.join(timeout=timeout_per_akun)
            if p.is_alive():
                print(f"‚è≥ Akun ke-{i+1} timeout > {timeout_per_akun} detik, hentikan...")
                p.terminate()
                p.join()

        print(f"--- Selesai batch {start+1} s/d {start+len(batch)} ---")
        time.sleep(jeda_batch)
def main():
    while True:
        print("==============================================")
        print("   Script Automasi intract")
        print("==============================================")
        print("Pilih mode eksekusi:")
        print("1. Single Mode (1 akun jalan berurutan sampai cookies habis)")
        print("2. Multi Mode  (2‚Äì10 akun jalan bersamaan per batch)")
        mode = input("Masukkan pilihan (1/2): ").strip()
        if mode not in ("1", "2"):
            print("‚ùå Pilihan tidak valid.\n")
            continue
        SEE_MORE_SELECTOR = "button._see_more_button_uw4u6_62"
        cookies_file = 'cookiesintract.txt'
        all_accounts = load_cookies_from_file(cookies_file)
        if not all_accounts:
            print("‚ùå Tidak ada cookies yang termuat.\n")
            return
        print(f"\nüìÇ Total cookies terdeteksi: {len(all_accounts)} akun")
        akun_bersamaan = None
        if mode == "2":
            try:
                val = int(input("Mau jalankan berapa akun bersamaan? (2‚Äì10): ").strip())
                if val < 2 or val > 10:
                    print("‚ùå Input invalid (harus 2‚Äì10). Kembali ke menu utama.\n")
                    continue
                akun_bersamaan = val
            except ValueError:
                print("‚ùå Input bukan angka. Kembali ke menu utama.\n")
                continue
        print("\nMasukkan link-link quest yang ingin dikerjakan.")
        print("Tekan ENTER setelah setiap link.")
        print("Ketik 'selesai' atau 'start' lalu tekan ENTER jika sudah semua.")
        QUEST_LINKS = []
        while True:
            link = input("> ").strip()
            if link.lower() in ['selesai', 'start', 'done']:
                break
            if link.startswith('http'):
                QUEST_LINKS.append(link)
            elif link:
                print("(Input tidak valid, bukan link.)")
        if not QUEST_LINKS:
            print("‚ùå Tidak ada link yang dimasukkan. Kembali ke menu utama.\n")
            continue
        if mode == "1":
            run_single_mode(all_accounts, QUEST_LINKS, SEE_MORE_SELECTOR, timeout_per_akun=30, jeda_antar_akun=10)
        else:
            run_multi_mode(all_accounts, QUEST_LINKS, SEE_MORE_SELECTOR, akun_bersamaan=akun_bersamaan, timeout_per_akun=30, jeda_batch=5)
        print("\n‚úÖ Semua pekerjaan selesai.\n")
        break
if __name__ == '__main__':
    multiprocessing.freeze_support()
    main()
